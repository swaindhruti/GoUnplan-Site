generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(cuid())
  email          String       @unique
  name           String
  bio            String?      @default("Travelling with vibe")
  phone          String       @unique
  password       String
  role           Role         @default(USER)
  image          String?      @default("https://avatar.iran.liara.run/public")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  appliedForHost Boolean      @default(false)
  bookings       Booking[]
  hostProfile    HostProfile?

  @@map("users")
}

model HostProfile {
  hostId      String        @id @default(cuid())
  description String?
  image       String?       @default("https://avatar.iran.liara.run/public")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  hostEmail   String        @unique
  hostMobile  String
  user        User          @relation(fields: [hostId], references: [id], onDelete: Cascade)
  travelPlans TravelPlans[]

  @@map("host_profiles")
}

model DayWiseItinerary {
  id            String      @id @default(cuid())
  dayNumber     Int
  title         String
  description   String
  activities    String[]    @default([])
  meals         String?
  accommodation String?
  travelPlanId  String
  travelPlan    TravelPlans @relation(fields: [travelPlanId], references: [travelPlanId], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("day_wise_itineraries")
}

model TravelPlans {
  travelPlanId       String             @id @default(cuid())
  title              String
  description        String
  includedActivities String[]
  restrictions       String[]
  noOfDays           Int
  hostId             String
  price              Int
  country            String
  state              String
  city               String
  status             TravelPlanStatus   @default(INACTIVE)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  maxParticipants    Int                @default(10)
  destination        String?
  filters            String[]           @default([])
  languages          String[]           @default([])
  endDate            DateTime?
  startDate          DateTime?
  bookings           Booking[]
  host               HostProfile        @relation(fields: [hostId], references: [hostId], onDelete: Cascade)
  dayWiseItinerary   DayWiseItinerary[]

  @@map("travel_plans")
}

model Booking {
  id             String        @id @default(cuid())
  userId         String
  travelPlanId   String
  startDate      DateTime
  endDate        DateTime
  totalPrice     Int
  participants   Int           @default(1)
  status         BookingStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  cancelledAt    DateTime?
  pricePerPerson Int
  refundAmount   Int           @default(0)
  travelPlan     TravelPlans   @relation(fields: [travelPlanId], references: [travelPlanId])
  user           User          @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model WaitingList {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("waiting_list")
}

enum Role {
  USER
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum TravelPlanStatus {
  ACTIVE
  INACTIVE
}
